--1.Devuelve todas las películas--
RESPUESTA
SELECT
	*
FROM
	MOVIES
	--2. Devuelve todos los géneros existentes--
	RESPUESTA
SELECT
	*
FROM
	GENRES
	--3. Devuelve la lista de todos los estudios de grabación que estén activos--
	RESPUESTA
SELECT
	STUDIO_NAME
FROM
	STUDIOS
WHERE
	STUDIO_ACTIVE = 1
	--4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub
	RESPUESTA
SELECT
	*
FROM
	MEMBERS
ORDER BY
	MEMBER_DISCHARGE_DATE DESC
LIMIT 20
--5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.--
RESPUESTA
--6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.
RESPUESTA
SELECT
	*
FROM
	MOVIES
WHERE
	YEAR(MOVIE_LAUNCH_DATE)>2000
	AND MOVIE_NAME LIKE 'A%'
	--7. Devuelve los actores nacidos un mes de Junio--
	RESPUESTA
SELECT
	*
	FROM ACTORS
WHERE
	MONTH(ACTOR_BIRTH_DATE)= 6
	--8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.---
	RESPUESTA
SELECT
	*
	FROM ACTORS
WHERE
	MONTH(ACTOR_BIRTH_DATE)!= 6
	AND ACTOR_DEAD_DATE IS NULL
	--9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos
	RESPUESTA
SELECT
	DIRECTOR_NAME,
	DATEDIFF('YEAR', DIRECTOR_BIRTH_DATE, CURDATE())
FROM
	DIRECTORS
WHERE
	DATEDIFF('YEAR', DIRECTOR_BIRTH_DATE, CURDATE())<= 50
	AND DIRECTOR_DEAD_DATE IS NULL
	--10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido
	RESPUESTA
SELECT
	ACTOR_NAME,
	DATEDIFF('YEAR', ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE)
FROM
	ACTORS
WHERE
	DATEDIFF('YEAR', ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE)<50
	AND ACTOR_DEAD_DATE IS NOT NULL
	--11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos
	SELECT
	DIRECTOR_NAME
FROM
	DIRECTORS
WHERE
	DATEDIFF('YEAR', DIRECTOR_BIRTH_DATE, CURDATE())<= 40
	AND 
	DIRECTOR_DEAD_DATE IS NULL
	--12. Indica la edad media de los directores vivos
	SELECT
	AVG (DATEDIFF('YEAR', DIRECTOR_BIRTH_DATE, CURDATE()))
FROM
	DIRECTORS
WHERE
	DIRECTOR_DEAD_DATE IS NULL
	--13. Indica la edad media de los actores que han fallecido
	SELECT
	AVG((DATEDIFF('YEAR', ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE)))
FROM
	ACTORS
WHERE
	ACTOR_DEAD_DATE IS NOT NULL
	--14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
	
	
	SELECT
	MOVIES.MOVIE_NAME,
	STUDIOS.STUDIO_NAME
FROM
	MOVIES
INNER JOIN STUDIOS ON
	MOVIES.STUDIO_ID = STUDIOS.STUDIO_ID
	--15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015
	
	SELECT
	DISTINCT
	MEMBERS.*
FROM
	MEMBERS
INNER JOIN MEMBERS_MOVIE_RENTAL ON
	MEMBERS.MEMBER_ID = MEMBERS_MOVIE_RENTAL.MEMBER_ID
WHERE
	MEMBER_RENTAL_DATE BETWEEN '2010-01-01' AND '2015-12-31'
	--16. Devuelve cuantas películas hay de cada país
	
	SELECT
	n.NATIONALITY_NAME AS COUNTRY,
	COUNT(m.MOVIE_ID) AS MOVIES
FROM
	NATIONALITIES n
LEFT JOIN MOVIES m ON
	n.NATIONALITY_ID = m.NATIONALITY_ID
GROUP BY
	n.NATIONALITY_NAME
ORDER BY
	COUNT(m.MOVIE_ID) 
DESC
	--17. Devuelve todas las películas que hay de género documental--
   SELECT
	MOVIE_NAME
FROM
	MOVIES
INNER JOIN GENRES ON
	MOVIES.GENRE_ID = GENRES.GENRE_ID
WHERE
	GENRE_NAME LIKE 'Documentary'
	
	
	--version con subconsulta
	
	
	SELECT
	*
FROM
	MOVIES
WHERE
	GENRE_ID = (
	SELECT
		GENRE_ID
	FROM
		GENRES
	WHERE
		GENRE_NAME = 'Documentary')
		
	--18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos
		
	
	 SELECT
	MOVIES.MOVIE_NAME
FROM
	MOVIES
INNER JOIN DIRECTORS ON
	MOVIES.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
WHERE
	YEAR(DIRECTOR_BIRTH_DATE)>= 1980
	AND DIRECTOR_DEAD_DATE IS NULL
	
	--19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.
	
	SELECT
	M.MEMBER_NAME,
	D.DIRECTOR_NAME,
	D.DIRECTOR_BIRTH_PLACE
FROM
	MEMBERS M
INNER JOIN DIRECTORS D ON
	M.MEMBER_TOWN = D.DIRECTOR_BIRTH_PLACE
	
	--20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo--
	
	SELECT
	MOVIE_NAME,
	YEAR(MOVIE_LAUNCH_DATE)
FROM
	MOVIES
INNER JOIN STUDIOS ON
	MOVIES.STUDIO_ID = STUDIOS.STUDIO_ID
WHERE
	STUDIO_ACTIVE = 0
	
	--21. Devuelve una lista de las últimas 10 películas que se han alquilado--
	
	SELECT
	MOVIE_NAME
FROM
	MOVIES
INNER JOIN MEMBERS_MOVIE_RENTAL ON
	MEMBERS_MOVIE_RENTAL.MOVIE_ID = MOVIES.MOVIE_ID
ORDER BY
	MEMBER_RENTAL_DATE DESC
LIMIT 10
--22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años





--23. Indica cuál es la media de duración de las películas de cada director
	
	SELECT
	D.DIRECTOR_NAME,
	AVG(M.MOVIE_DURATION) AS AVERAGE_MOVIE_DURATION
FROM
	MOVIES M
INNER JOIN DIRECTORS D ON
	M.DIRECTOR_ID = D.DIRECTOR_ID
GROUP BY
	D.DIRECTOR_NAME
	
	--24. Indica cuál es el nombre y la duración mínima de las películas que han sido alquiladas en los últimos 2 años por los miembros del videoclub (La "fecha de ejecución" en este script es el 25-01-2019)
	
	
	SELECT
	MOVIE_NAME,
	MOVIE_DURATION
FROM
	MOVIES
INNER JOIN MEMBERS_MOVIE_RENTAL ON
	MOVIES.MOVIE_ID = MEMBERS_MOVIE_RENTAL.MOVIE_ID
WHERE
	DATEADD('YEAR',
	-2,
	DATE '2019-01-25')<MEMBERS_MOVIE_RENTAL.MEMBER_RENTAL_DATE
ORDER BY
	MOVIE_DURATION
LIMIT 1


--25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título
	
	SELECT
	d.director_name,
	COUNT(*) AS numero_peliculas
FROM
	directors d
JOIN movies m ON
	d.director_id = m.director_id
WHERE
	UPPER(m.movie_name) LIKE '%THE%'
	AND MOVIE_LAUNCH_DATE >= DATE '1960-01-01'
	AND MOVIE_LAUNCH_DATE < DATE '1989-12-31'
GROUP BY
	d.director_name;


--26. Lista nombre, nacionalidad y director de todas las películas

SELECT
	MOVIES.MOVIE_NAME,
	NATIONALITIES.NATIONALITY_NAME,
	DIRECTORS.DIRECTOR_NAME
FROM
	MOVIES
INNER JOIN NATIONALITIES ON
	MOVIES.NATIONALITY_ID = NATIONALITIES.NATIONALITY_ID
INNER JOIN DIRECTORS ON
	MOVIES.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
	
	
	--27. Muestra las películas con los actores que han participado en cada una de ellas

SELECT
	MOVIES.MOVIE_NAME,
	ACTORS.ACTOR_NAME
FROM
	MOVIES
INNER JOIN MOVIES_ACTORS ON
	MOVIES.MOVIE_ID = MOVIES_ACTORS.MOVIE_ID
INNER JOIN ACTORS ON
	ACTORS.ACTOR_ID = MOVIES_ACTORS.ACTOR_ID
	
	
	--28. Indica cual es el nombre del director del que más películas se han alquilado
	
	SELECT
	DIRECTORS.DIRECTOR_NAME,
	COUNT(MEMBERS_MOVIE_RENTAL.MEMBER_MOVIE_RENTAL_ID)
FROM                                                                            
	DIRECTORS
INNER JOIN MOVIES ON
	MOVIES.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
INNER JOIN MEMBERS_MOVIE_RENTAL ON
	MEMBERS_MOVIE_RENTAL.MOVIE_ID = MOVIES.MOVIE_ID
GROUP BY
	DIRECTORS.DIRECTOR_NAME
	
	
	---29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado--
	
	SELECT
	SUM(AWARDS.AWARD_WIN),
	STUDIOS.STUDIO_NAME
FROM
	AWARDS
INNER JOIN MOVIES ON
	MOVIES.MOVIE_ID = AWARDS.MOVIE_ID
INNER JOIN STUDIOS ON
	STUDIOS.STUDIO_ID = MOVIES.STUDIO_ID
GROUP BY
	SUM
	
	
	--version 2
	
	

SELECT
	SUM(A.AWARD_WIN) AS AWARDS_WIN,
	S.STUDIO_NAME
FROM
	MOVIES M
INNER JOIN STUDIOS S ON
	M.STUDIO_ID = S.STUDIO_ID
INNER JOIN AWARDS A ON
	A.MOVIE_ID = M.MOVIE_ID
GROUP BY
	S.STUDIO_NAME
	
	
	--30. Indica el número de premios a los que estuvo nominado un actor,
--	pero que NO ha conseguido (Si una película está nominada a un premio,
--	su actor también lo está)
	
	SELECT
	AC.ACTOR_NAME,
	SUM(A.AWARD_ALMOST_WIN) AS AWARD_NOMINATION
FROM
	PUBLIC.MOVIES M
INNER JOIN PUBLIC.AWARDS A ON
	A.MOVIE_ID = M.MOVIE_ID
INNER JOIN PUBLIC.MOVIES_ACTORS MA ON
	MA.MOVIE_ID = M.MOVIE_ID
INNER JOIN PUBLIC.ACTORS AC ON
	AC.ACTOR_ID = MA.ACTOR_ID
GROUP BY
	AC.ACTOR_NAME
	
	
	--31. Indica cuantos actores y directores hicieron películas para los estudios no activos

SELECT
	COUNT( DISTINCT M.DIRECTOR_ID) AS DIRECTOR_NUMBER,
	COUNT(DISTINCT MA.ACTOR_ID) AS ACTOR_NUMBER
FROM
	STUDIOS S
INNER JOIN
	MOVIES M ON
	M.STUDIO_ID = S.STUDIO_ID
INNER JOIN MOVIES_ACTORS MA ON
	MA.MOVIE_ID = M.MOVIE_ID
WHERE
	S.STUDIO_ACTIVE = FALSE
	---	32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50


SELECT
	 DISTINCT MEMBER_NAME,
	MEMBER_TOWN,
	MEMBER_PHONE,
	AWARD_WIN,
	AWARD_NOMINATION
FROM
	MEMBERS
INNER JOIN MEMBERS_MOVIE_RENTAL ON
	MEMBERS.MEMBER_ID = MEMBERS_MOVIE_RENTAL.MEMBER_ID
INNER JOIN MOVIES ON
	MOVIES.MOVIE_ID = MEMBERS_MOVIE_RENTAL.MOVIE_ID
INNER JOIN AWARDS ON
	MOVIES.MOVIE_ID = AWARDS.MOVIE_ID
WHERE 
	AWARDS.AWARD_NOMINATION>150
	AND AWARDS.AWARD_WIN<50
	----version con subconsulta---
	
	SELECT
	DISTINCT M.MEMBER_NAME,
	M.MEMBER_TOWN,
	M.MEMBER_PHONE
FROM
	MEMBERS_MOVIE_RENTAL MMR
INNER JOIN MEMBERS M ON
	MMR.MEMBER_ID = M.MEMBER_ID
WHERE
	MMR.MOVIE_ID IN(
	SELECT
		MOVIE_ID
	FROM
		AWARDS
	WHERE
		AWARD_NOMINATION > 150
		AND AWARD_WIN < 50)
	---	33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)
 
       SELECT
	DIRECTORS.DIRECTOR_NAME,
	MAX(MOVIES.MOVIE_LAUNCH_DATE),
	DIRECTORS.DIRECTOR_DEAD_DATE
FROM
	MOVIES
INNER JOIN DIRECTORS ON
	MOVIES.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
WHERE
	DIRECTORS.DIRECTOR_DEAD_DATE<MOVIES.MOVIE_LAUNCH_DATE
GROUP BY
	DIRECTORS.DIRECTOR_ID,
	DIRECTORS.DIRECTOR_DEAD_DATE
	--34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)
	
    UPDATE
	DIRECTORS
SET
	DIRECTOR_DEAD_DATE =(
	SELECT
		MAX(DATEADD(YEAR, 1, M.MOVIE_LAUNCH_DATE)) AS POST_MOVIE_LAUNCH_DATE
	FROM
		MOVIES M
	INNER JOIN DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE IS NOT NULL
		AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
		AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
	GROUP BY
		DIRECTOR_NAME,
		DIRECTOR_DEAD_DATE)
WHERE
	DIRECTOR_ID IN (
	SELECT
		DISTINCT D.DIRECTOR_ID
	FROM
		MOVIES M
	INNER JOIN DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE IS NOT NULL
		AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE )
	---version merge----
	--35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película
	 
	 [Ayer 13:51] Pablo Martínez
	-- 35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película

 

SELECT
	GROUPID.DIRECTOR_NAME,
	GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME
FROM
	(
	SELECT
		COUNT(G.GENRE_NAME) AS NUM_MOVIES,
		D.DIRECTOR_ID,
		D.DIRECTOR_NAME,
		G.GENRE_ID,
		G.GENRE_NAME
	FROM
		MOVIES M
	INNER JOIN GENRES AS G ON
		M.GENRE_ID = G.GENRE_ID
	INNER JOIN DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	GROUP BY
		G.GENRE_ID,
		D.DIRECTOR_ID
	ORDER BY
		D.DIRECTOR_ID) GROUPID
INNER JOIN (
	SELECT
		DIRECTOR_ID,
		MAX(NUM_MOVIES) NUM_MOVIES
	FROM
		(
		SELECT
			COUNT(G.GENRE_NAME) AS NUM_MOVIES,
			D.DIRECTOR_ID,
			D.DIRECTOR_NAME,
			G.GENRE_ID,
			G.GENRE_NAME
		FROM
			MOVIES M
		INNER JOIN GENRES AS G ON
			M.GENRE_ID = G.GENRE_ID
		INNER JOIN DIRECTORS D ON
			M.DIRECTOR_ID = D.DIRECTOR_ID
		GROUP BY
			G.GENRE_ID,
			D.DIRECTOR_ID
		ORDER BY
			D.DIRECTOR_ID)
	GROUP BY
		DIRECTOR_ID) MAXVAL ON
	GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID
	AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
GROUP BY
	GROUPID.DIRECTOR_NAME
	--36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas
	 
	 SELECT
	GROUP_ID.STUDIO_NAME,
	GROUP_CONCAT(GROUP_ID.NATIONALITY_NAME) AS NATIONALITY_NAME
FROM
	(
	SELECT
		COUNT(NATIONALITY_NAME) AS NUM_NATIONALITIES,
		NATIONALITY_ID,
		STUDIO_ID,
		STUDIO_NAME,
		NATIONALITY_NAME
	FROM
		NATIONALITIES
	INNER JOIN MOVIES ON
		MOVIES.NATIONALITY_ID = NATIONALITIES.NATIONALITY_ID
	INNER JOIN STUDIOS ON
		STUDIOS.STUDIO_ID = MOVIES.STUDIO_ID
	GROUP BY
		NATIONALITY_ID,
		STUDIO_ID,
		STUDIO_NAME,
		NATIONALITY_NAME
	ORDER BY
		STUDIO_ID) GROUP_ID
INNER JOIN(
	SELECT
		STUDIO_ID,
		MAX(NUM_NATIONALITIES) NUM_NATIONALITIES
	FROM
		(
		SELECT
			COUNT(NATIONALITY_NAME) AS NUM_NATIONALITIES,
			NATIONALITY_ID,
			STUDIO_ID,
			STUDIO_NAME,
			NATIONALITY_NAME
		FROM
			NATIONALITIES
		INNER JOIN MOVIES ON
			MOVIES.NATIONALITY_ID = NATIONALITIES.NATIONALITY_ID
		INNER JOIN STUDIOS ON
			STUDIOS.STUDIO_ID = MOVIES.STUDIO_ID
		GROUP BY
			NATIONALITY_ID,
			STUDIO_ID,
			STUDIO_NAME,
			NATIONALITY_NAME
		ORDER BY
			STUDIO_ID)
	GROUP BY 
			STUDIO_ID) MAXVAL ON 
	GROUP_ID.NUM_NATIONALITIES = MAXVAL.NUM_NATIONALITIES
	AND GROUP_ID.STUDIO_ID = MAXVAL.STUDIO_ID
GROUP BY 
	
	GROUP_ID.STUDIO_NAME
	--37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad
SELECT
	MOVIERENTALS.MOVIE_NAME,
	MOVIERENTALS.MEMBER_NAME
FROM
	(
	SELECT
		MO.MOVIE_NAME,
		MMR.MOVIE_ID,
		MMR.MEMBER_ID,
		MMR.MEMBER_RENTAL_DATE,
		M.MEMBER_NAME,
		TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
	FROM
		MOVIES MO
	INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
		MO.MOVIE_ID = MMR.MOVIE_ID
	INNER JOIN MEMBERS M ON
		MMR.MEMBER_ID = M.MEMBER_ID
	WHERE
		TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
		SELECT
			NATIONALITY_ID
		FROM
			NATIONALITIES

 

)
	GROUP BY
		MO.MOVIE_NAME,
		MMR.MOVIE_ID,
		MMR.MEMBER_ID,
		MMR.MEMBER_RENTAL_DATE,
		M.MEMBER_NAME,
		LAST_DIGIT
	ORDER BY
		M.MEMBER_NAME

 

) MOVIERENTALS
INNER JOIN

    (
	SELECT
		MEMBER_ID,
		MIN(MEMBER_RENTAL_DATE) AS "FIRST_RENTAL"
	FROM
		(
		SELECT
			MO.MOVIE_NAME,
			MMR.MOVIE_ID,
			MMR.MEMBER_ID,
			MMR.MEMBER_RENTAL_DATE,
			M.MEMBER_NAME,
			TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
		FROM
			MOVIES MO
		INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
			MO.MOVIE_ID = MMR.MOVIE_ID
		INNER JOIN MEMBERS M ON
			MMR.MEMBER_ID = M.MEMBER_ID
		WHERE
			TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
			SELECT
				NATIONALITY_ID
			FROM
				NATIONALITIES

 

)
		GROUP BY
			MO.MOVIE_NAME,
			MMR.MOVIE_ID,
			MMR.MEMBER_ID,
			MMR.MEMBER_RENTAL_DATE,
			M.MEMBER_NAME,
			LAST_DIGIT
		ORDER BY
			M.MEMBER_NAME
    )
	GROUP BY
		MEMBER_ID) FIRSTRENTALS ON
	MOVIERENTALS.MEMBER_ID = FIRSTRENTALS.MEMBER_ID
	AND MOVIERENTALS.MEMBER_RENTAL_DATE = FIRSTRENTALS.FIRST_RENTAL
GROUP BY
	MOVIERENTALS.MOVIE_NAME,
	MOVIERENTALS.MEMBER_NAME
